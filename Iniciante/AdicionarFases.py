from Iniciante.Persistencia.Entidade.Fase import Fase
from Iniciante.Persistencia.Impl.FasePersistenciaImpl import FasePersistenciaImpl

fases = [
    Fase(None, "iniciante", "Saída de Dados com print()",
         "O print() é a ferramenta fundamental para exibir informações na tela. Imagine ele como um alto-falante que repete tudo o que você colocar dentro dos parênteses. Use aspas para textos e números podem ser mostrados diretamente. É perfeito para mensagens de boas-vindas, resultados de cálculos ou qualquer informação que o usuário precisa ver!\nExemplo:\nprint(\"Bem-vindo ao Python Dev Tycoon!\")\nSaída: Bem-vindo ao Python Dev Tycoon!\n\nprint(42)\nSaída: 42\n\nprint(\"O resultado é:\", 10 + 5)\nSaída: O resultado é: 15"),

    Fase(None, "iniciante", "Entrada de Dados com input()",
         "O input() é como um microfone que captura o que o usuário digita. Ele permite que seu programa converse com quem está usando! Tudo o que for digitado no teclado será capturado e pode ser guardado em uma variável para usar depois. Sempre use uma mensagem dentro do input() para orientar o usuário!\nExemplo:\nnome = input(\"Digite seu nome: \")\nSaída no console: Digite seu nome: _\n(usuário digita \"Ana\" e pressiona Enter)\n\nidade = input(\"Quantos anos você tem? \")\nSaída no console: Quantos anos você tem? _\n(usuário digita \"25\" e pressiona Enter)\n\nprint(\"Olá,\", nome, \"! Você tem\", idade, \"anos.\")\nSaída: Olá, Ana ! Você tem 25 anos."),

    Fase(None, "iniciante", "Variáveis e Tipos Simples",
         "Variáveis são como etiquetas que você coloca em valores para encontrá-los depois! Elas guardam informações temporárias na memória do computador. No Python, você não precisa dizer o tipo da variável - ela descobre sozinha pelo valor que você coloca. Use nomes descritivos para ficar fácil de entender!\nExemplo:\nquantidade_macas = 5  # número inteiro\npreco_por_maca = 2.50  # número decimal\nnome_fruta = \"maçã\"  # texto\nesta_fresca = True  # valor verdadeiro/falso\n\nprint(quantidade_macas)\nSaída: 5\n\nprint(\"Fruta:\", nome_fruta, \"Preço:\", preco_por_maca)\nSaída: Fruta: maçã Preço: 2.5\n\nprint(\"Está fresca?\", esta_fresca)\nSaída: Está fresca? True"),

    Fase(None, "iniciante", "Operadores Aritméticos e Relacionais",
          "Operadores são símbolos especiais que realizam operações com valores. Os aritméticos fazem contas matemáticas (soma, subtração, etc) e os relacionais comparam valores (maior, menor, igual). Eles são essenciais para fazer cálculos e tomar decisões no seu programa!\n\nEXEMPLOS ARITMÉTICOS:\n\nsoma = 10 + 5\nprint(soma)\nSaída: 15\n\nsubtracao = 20 - 8\nprint(subtracao)\nSaída: 12\n\nmultiplicacao = 6 * 3\nprint(multiplicacao)\nSaída: 18\n\ndivisao = 15 / 3\nprint(divisao)\nSaída: 5.0\n\ndivisao_inteira = 17 // 3\nprint(divisao_inteira)\nSaída: 5\n\nmodulo = 17 % 3\nprint(modulo)\nSaída: 2\n\nexponenciacao = 2 ** 4\nprint(exponenciacao)\nSaída: 16\n\nresultado = (5 + 3) * 2\nprint(resultado)\nSaída: 16\n\nEXEMPLOS RELACIONAIS:\n\ne_maior = 15 > 10\nprint(e_maior)\nSaída: True\n\nmenor_que = 8 < 12\nprint(menor_que)\nSaída: True\n\nmaior_igual = 10 >= 10\nprint(maior_igual)\nSaída: True\n\nmenor_igual = 7 <= 5\nprint(menor_igual)\nSaída: False\n\nsao_iguais = 7 == 7\nprint(sao_iguais)\nSaída: True\n\ndiferente = 5 != 3\nprint(diferente)\nSaída: True\n\ncomparacao_texto = 'hello' == 'hello'\nprint(comparacao_texto)\nSaída: True\n\ndiferente_texto = 'python' != 'java'\nprint(diferente_texto)\nSaída: True"),

    Fase(None, "iniciante", "Estruturas Condicionais (if/else)",
         "As condicionais são como bifurcações numa estrada - elas permitem que seu programa escolha caminhos diferentes baseado em condições. O if verifica se algo é verdadeiro, o else cuida do caso contrário, e o elif permite vários caminhos alternativos. É assim que programas tomam decisões inteligentes!\nExemplo:\nidade = 16\nif idade >= 18:\n    print(\"Pode dirigir!\")\nelif idade >= 16:\n    print(\"Quase lá! Precisa de acompanhante.\")\nelse:\n    print(\"Ainda não pode dirigir.\")\nSaída: Quase lá! Precisa de acompanhante.\n\nnota = 8.5\nif nota >= 7:\n    print(\"Aprovado!\")\nelse:\n    print(\"Reprovado!\")\nSaída: Aprovado!"),

    Fase(None, "iniciante", "Estruturas de Repetição (for)",
         "O for é como um trabalhador incansável que repete uma tarefa várias vezes! Ele percorre automaticamente sequências (como números, listas ou textos) executando o mesmo bloco de código para cada item. Perfeito para quando você sabe quantas vezes quer repetir algo!\nExemplo:\nprint(\"Contagem regressiva:\")\nfor numero in range(5, 0, -1):\n    print(numero)\nprint(\"Fogooo!\")\nSaída:\nContagem regressiva:\n5\n4\n3\n2\n1\nFogooo!\n\nfor letra in \"Python\":\n    print(letra)\nSaída:\nP\ny\nt\nh\no\nn"),

    Fase(None, "iniciante", "Estrutura de Repetição (while)",
         "O while é como um guarda que fica repetindo uma tarefa enquanto uma condição for verdadeira! Diferente do for, ele é ideal quando você não sabe quantas vezes vai precisar repetir. Cuidado para não criar loops infinitos - sempre atualize a condição!\nExemplo:\ncontador = 1\nwhile contador <= 5:\n    print(\"Executando pela\", contador, \"ª vez\")\n    contador += 1\nSaída:\nExecutando pela 1 ª vez\nExecutando pela 2 ª vez\nExecutando pela 3 ª vez\nExecutando pela 4 ª vez\nExecutando pela 5 ª vez\n\nsenha_correta = \"python123\"\ntentativa = \"\"\nwhile tentativa != senha_correta:\n    tentativa = input(\"Digite a senha: \")\nprint(\"Acesso permitido!\")\nSaída no console:\nDigite a senha: _\n(usuário digita senha errada)\nDigite a senha: _\n(usuário digita \"python123\")\nAcesso permitido!"),

    Fase(None, "iniciante", "Funções Simples",
         "Funções são como receitas prontas que você pode usar sempre que precisar! Elas agrupam blocos de código com um nome, evitando repetição e organizando seu programa. Você cria uma vez e chama quantas vezes quiser. É o primeiro passo para programação modular!\nExemplo:\ndef cumprimentar():\n    print(\"Olá!\")\n    print(\"Bem-vindo ao programa!\")\n\ndef calcular_dobro(numero):\n    return numero * 2\n\n# Usando as funções:\ncumprimentar()\nSaída:\nOlá!\nBem-vindo ao programa!\n\nresultado = calcular_dobro(8)\nprint(\"O dobro é:\", resultado)\nSaída: O dobro é: 16\n\nprint(calcular_dobro(5))\nSaída: 10")
]

persistencia = FasePersistenciaImpl()
for fase in fases:
    persistencia.salvar(fase)